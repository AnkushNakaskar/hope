options {
    JAVA_UNICODE_ESCAPE = true;
    LOOKAHEAD = 3;
    FORCE_LA_CHECK = true;
}
PARSER_BEGIN(HopeParser)
package io.appform.hope.lang.parser;

import io.appform.hope.core.*;
import io.appform.hope.core.combiners.*;
import io.appform.hope.core.operators.*;
import io.appform.hope.core.values.*;
import io.appform.hope.core.functions.*;
import io.appform.hope.core.*;
import io.appform.hope.lang.*;

import java.util.ArrayList;
import java.util.List;

public class HopeParser {
    private FunctionRegistry functionRegistry;
}
PARSER_END(HopeParser)


SKIP :  {" "}
SKIP :  {"\n"|"\r"|"\r\n"}
TOKEN : {<COMMA : ",">}
TOKEN : {<OPEN_BRACKET : "(">}
TOKEN : {<CLOSE_BRACKET : ")">}
TOKEN : {<EQUALS : "==">}
TOKEN : {<NOT_EQUALS : "!=">}
TOKEN : {<GREATER : ">">}
TOKEN : {<GREATER_EQUALS : ">=">}
TOKEN : {<LESSER : "<">}
TOKEN : {<LESSER_EQUALS : "<=">}
TOKEN : {<MATCHES : "~">}
TOKEN : {<NOT : "^">}
TOKEN : {<OR : "|">}
TOKEN : {<AND : "&">}
TOKEN : {<AND_COMBINER : "&&">}
TOKEN : {<OR_COMBINER : "||">}
TOKEN : {<QUOTE : "\"">}
TOKEN : {<NUMBER :(["0"-"9"])+|(["0"-"9"])+ "." (["0"-"9"])+ | (["0"-"9"])+ "." | "."(["0"-"9"])+>}
TOKEN : {<BOOLEAN: ("true" | "TRUE" | "false" | "FALSE")>}
TOKEN : {<FUNCTION_CALL : ["a"-"z", "A"-"Z"](["0"-"9", "a"-"z", "A"-"Z" , "_", "."])+>}
TOKEN : {<STRING_VALUE : (["0"-"9", "a"-"z", "A"-"Z" , "/", "+", "@"])+>}
TOKEN : {<PATH_VALUE : "$." <STRING_VALUE>>}
TOKEN : {<STRING: <QUOTE> <STRING_VALUE> <QUOTE>>}
TOKEN : {<PATH: <QUOTE> <PATH_VALUE> <QUOTE>>}
TOKEN : {<ARRAY_START: "[">}
TOKEN : {<ARRAY_END: "]">}
TOKEN : {<ARRAY_NAME : (["a"-"z", "A"-"Z"]["0"-"9", "a"-"z", "A"-"Z" , "_"])+>}

Evaluatable parse(FunctionRegistry functionRegistry): {
    this.functionRegistry = functionRegistry;
    Evaluatable value = null;
}
{

    value = CombinerOpRepr() {
        return value;
    }
}

Evaluatable CombinerOpRepr(): {
    Combiner combiner = null;
    Evaluatable current = null;
    List<Evaluatable> ops = new ArrayList<Evaluatable>();
}
{
    current = Expression() {
        ops.add(current);
    }
    (
        (
            <AND_COMBINER> { combiner = new AndCombiner(ops); }
            current = Expression() {
                ops.add(current);
            }
        )
        | (
            <OR_COMBINER> { combiner = new OrCombiner(ops); }
            current = Expression() {
                ops.add(current);
            }
        )
    )*
    {
        if(null == combiner) {
            if(!ops.isEmpty()) {
                return ops.get(0);
            }
        }
        return combiner;
    }
}

Evaluatable Expression(): {
    Evaluatable value = null;
}
{
    value = NativeOperations() {
        return value;
    }
    |
    <OPEN_BRACKET> [ value = CombinerOpRepr() | value = NativeOperations()] <CLOSE_BRACKET> {
        return value;
    }
}

Evaluatable NativeOperations() : {
    Evaluatable value = null;
}
{
    (
        value = BooleanOpsRepr()
        | value = NumericalOpsRepr()
        | value = StringOpsRepr()
        | value = JsonPathOpsRepr()
        | value = FunctionOpsRepr()
        | value = UnaryOpRepr()
    )
    {
        return value;
    }
}

Evaluatable UnaryOpRepr(): {
    BooleanValue bOp = null;
}
{
    <NOT> bOp = BooleanOrJsonPathRhsOperand() {
        return new Not(bOp);
    }
}

Evaluatable StringOpsRepr(): {
    StringValue lhs = null;
    StringValue rhs = null;
    Value strOrJsonPath = null;
}
{
    lhs = StringRepr()
    ( <EQUALS>
        strOrJsonPath = StringOrJsonPathRhsOperand() {
            return new Equals(lhs, strOrJsonPath);
        }
        | <NOT_EQUALS>
        strOrJsonPath = StringOrJsonPathRhsOperand() {
            return new NotEquals(lhs, strOrJsonPath);
        }
    )

}

Evaluatable JsonPathOpsRepr(): {
    JsonPathValue lhs = null;
    Value rhs = null;
    NumericValue nRhs = null;
    BooleanValue bRhs = null;
    StringValue sRhs = null;
}
{
    lhs = JsonPathRepr()
    (
        <EQUALS>
        rhs = RhsOperand() {
            return new Equals(lhs, rhs);
        }
        | <NOT_EQUALS>
        rhs = RhsOperand() {
            return new NotEquals(lhs, rhs);
        }
        | <GREATER>
        nRhs = NumericOrJsonPathRhsOperand() {
            return new Greater(new NumericValue(lhs), nRhs);
        }
        | <GREATER_EQUALS>
        nRhs = NumericOrJsonPathRhsOperand() {
            return new GreaterEquals(new NumericValue(lhs), nRhs);
        }
        | <LESSER>
        nRhs = NumericOrJsonPathRhsOperand() {
            return new Lesser(new NumericValue(lhs), nRhs);
        }
        | <LESSER_EQUALS>
        nRhs = NumericOrJsonPathRhsOperand() {
            return new LesserEquals(new NumericValue(lhs), nRhs);
        }
        | <AND>
        bRhs = BooleanOrJsonPathRhsOperand() {
            return new And(new BooleanValue(lhs), bRhs);
        }
        | <OR>
        bRhs = BooleanOrJsonPathRhsOperand() {
            return new Or(new BooleanValue(lhs), bRhs);
        }
    )
}

Evaluatable FunctionOpsRepr(): {
    FunctionValue lhs = null;
    Value rhs = null;
    NumericValue nRhs = null;
    BooleanValue bRhs = null;
    StringValue sRhs = null;
}
{
    lhs = FunctionRepr()
    (
        <EQUALS>
        rhs = RhsOperand() {
            return new Equals(lhs, rhs);
        }
        | <NOT_EQUALS>
        rhs = RhsOperand() {
            return new NotEquals(lhs, rhs);
        }
        | <GREATER>
        nRhs = NumericOrJsonPathRhsOperand() {
            return new Greater(new NumericValue(lhs), nRhs);
        }
        | <GREATER_EQUALS>
        nRhs = NumericOrJsonPathRhsOperand() {
            return new GreaterEquals(new NumericValue(lhs), nRhs);
        }
        | <LESSER>
        nRhs = NumericOrJsonPathRhsOperand() {
            return new Lesser(new NumericValue(lhs), nRhs);
        }
        | <LESSER_EQUALS>
        nRhs = NumericOrJsonPathRhsOperand() {
            return new LesserEquals(new NumericValue(lhs), nRhs);
        }
        | <AND>
        bRhs = BooleanOrJsonPathRhsOperand() {
            return new And(new BooleanValue(lhs), bRhs);
        }
        | <OR>
        bRhs = BooleanOrJsonPathRhsOperand() {
            return new Or(new BooleanValue(lhs), bRhs);
        }
    )
}

Evaluatable BooleanOpsRepr(): {
    BooleanValue lhs = null;
    BooleanValue rhs = null;
}
{
    lhs = BooleanRepr()
    (
        <AND>
        rhs = BooleanOrJsonPathRhsOperand() {
            return new And(lhs, rhs);
        }
        | <OR>
        rhs = BooleanOrJsonPathRhsOperand() {
            return new Or(lhs, rhs);
        }
        | <EQUALS>
        rhs = BooleanOrJsonPathRhsOperand() {
            return new Equals(lhs, rhs);
        }
        | <NOT_EQUALS>
        rhs = BooleanOrJsonPathRhsOperand() {
            return new NotEquals(lhs, rhs);
        }
    )
}

Evaluatable NumericalOpsRepr(): {
    NumericValue lhs = null;
    NumericValue rhs = null;
}
{
    lhs = NumericRepr()
    (
        <GREATER>
        rhs = NumericOrJsonPathRhsOperand() {
            return new Greater(lhs, rhs);
        }
        | <GREATER_EQUALS>
        rhs = NumericOrJsonPathRhsOperand() {
            return new GreaterEquals(lhs, rhs);
        }
        | <LESSER>
        rhs = NumericOrJsonPathRhsOperand() {
            return new Lesser(lhs, rhs);
        }
        | <LESSER_EQUALS>
        rhs = NumericOrJsonPathRhsOperand() {
            return new LesserEquals(lhs, rhs);
        }
        | <EQUALS>
        rhs = NumericOrJsonPathRhsOperand() {
            return new Equals(lhs, rhs);
        }
        | <NOT_EQUALS>
        rhs = NumericOrJsonPathRhsOperand() {
            return new NotEquals(lhs, rhs);
        }
    )
}

Value RhsOperand(): {
    Value result = null;
}
{
    (result = StringRepr()
     | result = JsonPathRepr()
     | result = NumericRepr()
     | result = BooleanRepr()
     | result = FunctionRepr()
     )
    {
        return result;
    }
}

FunctionValue FunctionRepr() : {
    Token t = null;
    List<Value> params = new ArrayList();
    Value value = null;
}
{
    (
        t = <FUNCTION_CALL> <OPEN_BRACKET>
        (
            (value = RhsOperand() { params.add(value); })
            |( value = ArrayRepr() { params.add(value); })
        )?
        (<COMMA>
            ((value = RhsOperand() { params.add(value); })
            |( value = ArrayRepr() { params.add(value); }))
        )*
        <CLOSE_BRACKET>
    )
    {
        FunctionRegistry.FunctionMeta function = TypeUtils.function(functionRegistry, t.image, params);
        return new FunctionValue(t.image, params, function);
    }
}

ArrayValue ArrayRepr() : {
    List<Value> params = new ArrayList();
    Value value = null;
}
{
    (
        <ARRAY_START>
        (value = RhsOperand() {
            params.add(value);
        })?
        (<COMMA> value = RhsOperand() {
            params.add(value);
        })*
        <ARRAY_END>
    )
    {
        return new ArrayValue(params);
    }
}

JsonPathValue PathOrEvaluatedPathRhsOperand(): {
    JsonPathValue jResult = null;
    FunctionValue fResult = null;
}
{
    (
        jResult = JsonPathRepr() {
            return jResult;
        }
        | fResult = FunctionRepr() {
            return new JsonPathValue(fResult);
        }
     )
}

StringValue StringOrJsonPathRhsOperand(): {
    StringValue sResult = null;;
    JsonPathValue jResult = null;;
    FunctionValue fResult = null;
}
{
    (
        sResult = StringRepr() {
            return sResult;
        }
        | jResult = JsonPathRepr() {
            return new StringValue(jResult);
        }
        | fResult = FunctionRepr() {
            return new StringValue(fResult);
        }
     )
}

NumericValue NumericOrJsonPathRhsOperand(): {
    NumericValue nResult = null;
    JsonPathValue jResult = null;
    FunctionValue fResult = null;
}
{
    (
        nResult = NumericRepr() {
            return nResult;
        }
        | jResult = JsonPathRepr()
        {
            return new NumericValue(jResult);
        }
        | fResult = FunctionRepr() {
            return new NumericValue(fResult);
        }
    )
}

BooleanValue BooleanOrJsonPathRhsOperand(): {
    BooleanValue bResult = null;
    JsonPathValue jResult = null;
}
{
    (
        bResult = BooleanRepr() {
            return bResult;
        }
        | jResult = JsonPathRepr() {
            return new BooleanValue(jResult);
        }
    )
}

StringValue StringRepr() : {
    Token t = null;
}
{
    t = <STRING>
    {
        return new StringValue(t.image.replaceAll("^\"|\"$", ""));
    }
}

JsonPathValue JsonPathRepr() : {
    Token t = null;
}
{
    t = <PATH>
    {
        return new JsonPathValue(t.image.replaceAll("^\"|\"$", ""));
    }
}

NumericValue NumericRepr() : {
    Token t = null;
}
{
    t = <NUMBER> {
        return new NumericValue(Double.valueOf(t.image));
    }
}

BooleanValue BooleanRepr() : {
    Token t = null;
}
{
    t = <BOOLEAN> {
        return new BooleanValue(Boolean.valueOf(t.image));
    }
}